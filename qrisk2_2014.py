import math

#ClinRisk Ltd. 

#Additional terms
 
#The following disclaimer must be held together with any risk score score generated by this code.  
#If the score is displayed, then this disclaimer must be displayed or otherwise be made easily accessible, e.g. by a prominent #link alongside it.
#The initial version of this file, to be found at http://svn.clinrisk.co.uk/opensource/qrisk2, faithfully implements #QRISK2-2014.
#ClinRisk Ltd. have released this code under the GNU Lesser General Public License to enable others to implement the algorithm #faithfully.
#However, the nature of the GNU Lesser General Public License is such that we cannot prevent, for example, someone #accidentally 
#altering the coefficients, getting the inputs wrong, or just poor programming.
#ClinRisk Ltd. stress, therefore, that it is the responsibility of the end user to check that the source that they receive #produces the same results as the original code found at https://qrisk.org.
#Inaccurate implementations of risk scores can lead to wrong patients being given the wrong treatment.

#End of additional terms

def calc_cvd_risk_male(age, b_AF, b_ra, b_renal, b_treatedhyp, 
                       b_type1, b_type2, bmi, ethrisk, fh_cvd, 
                       rati, sbp, smoke_cat, surv, town):
    
    survivor = [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.977699398994446,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
    ]


    # The conditional arrays 

    Iethrisk = [
        0.0,
        0.0,
        0.35671336474934434,
        0.53695596081761898,
        0.51908784195296243,
        0.2182992106490147,
        -0.34741747058984918,
        -0.36747300379228037,
        -0.37496648914261427,
        -0.19269477425316045
    ]

    Ismoke = [
        0,
        0.27846496641570462,
        0.60678343951689595,
        0.71038350609892587,
        0.86261723391812029
    ]


    # Applying the fractional polynomial transforms
    # (which includes scaling)

    dage = age * 1.0
    dage = dage / 10
    age_1 = math.pow(dage, -1)
    age_2 = math.pow(dage, 2)
    dbmi = bmi * 1.0
    dbmi = dbmi / 10
    bmi_1 = math.pow(dbmi, -2)
    bmi_2 = math.pow(dbmi, -2) * math.log(dbmi)

    # Centering the continuous variables

    age_1 = age_1 - 0.232008963823318
    age_2 = age_2 - 18.577636718750000
    bmi_1 = bmi_1 - 0.146408438682556
    bmi_2 = bmi_2 - 0.140651300549507
    rati = rati - 4.377167701721191
    sbp = sbp - 131.038314819335940
    town = town - 0.151332527399063

    # Start of sum
    a = 0.0

    # The conditional sums

    a = a + Iethrisk[ethrisk]
    a = a + Ismoke[smoke_cat]

    # Sum from continuous values

    a = a + age_1 * -17.622554338194561
    a = a + age_2 * 0.024187318929827364
    a = a + bmi_1 * 1.7320282704272665
    a = a + bmi_2 * -7.2311754066699754
    a = a + rati * 0.17513879740122351
    a = a + sbp * 0.01016763051791969
    a = a + town * 0.029817727149672096

    # Sum from boolean values

    a = a + b_AF * 0.98909975261894023
    a = a + b_ra * 0.25418862091186112
    a = a + b_renal * 0.794978923043832
    a = a + b_treatedhyp * 0.62293594798680441
    a = a + b_type1 * 1.333035332146393
    a = a + b_type2 * 0.93729568281519404
    a = a + fh_cvd * 0.59233537365824229


    if smoke_cat == 0:
        a = a + (age_1 * 0.92437474436327760)
    elif smoke_cat == 1:
        a = a + (age_1 * 1.95975275000812840)
    elif smoke_cat == 2:
        a = a + (age_1 * 2.99935448476311530)
    elif smoke_cat == 3:
        a = a + (age_1 * 5.03707352547681000)

    a = a + age_1 * b_AF * 8.23542054554827270
    a = a + age_1 * b_renal * -3.97473899519767790
    a = a + age_1 * b_treatedhyp * 7.87377431591677280
    a = a + age_1 * b_type1 * 5.42385044144609370
    a = a + age_1 * b_type2 * 5.06241618065301410
    a = a + age_1 * bmi_1 * 33.54375251673942400
    a = a + age_1 * bmi_2 * -129.97667382572038000
    a = a + age_1 * fh_cvd * 1.92799638746597890
    a = a + age_1 * sbp * 0.052344089217562020
    a = a + age_1 * town * -0.17305880749635402

    if smoke_cat == 0:
        a = a + (age_2 * -0.00344660740388543940)
    elif smoke_cat == 1:
        a = a + (age_2 * -0.00507034314999529540)
    elif smoke_cat == 2:
        a = a + (age_2 * 0.00032160597999164408)
    elif smoke_cat == 3:
        a = a + (age_2 * 0.00313125371442400870)

    a = a + age_2 * b_AF * 0.00732919372550399660
    a = a + age_2 * b_renal * -0.026155707328653178
    a = a + age_2 * b_treatedhyp * 0.00855563826226181210
    a = a + age_2 * b_type1 * 0.00205864794826707230
    a = a + age_2 * b_type2 * -0.00023285907708541729
    a = a + age_2 * bmi_1 * 0.081184721208079499
    a = a + age_2 * bmi_2 * -0.255891906885094830
    a = a + age_2 * fh_cvd * -0.00567290737296634060
    a = a + age_2 * sbp * -0.000053658425730729933
    a = a + age_2 * town * -0.00107633050526058570
    
    # Calculate QRISK2 score
    
    score = 100.0 * (1.0 - math.pow(survivor[surv], math.exp(a)))
    
    return score
    
    
def calc_cvd_risk_female(age, b_AF, b_ra, b_renal, b_treatedhyp, 
                       b_type1, b_type2, bmi, ethrisk, fh_cvd, 
                       rati, sbp, smoke_cat, surv, town):
    survivor = [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.988948762416840,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
    ]


    # The conditional arrays 
    
    Iethrisk = [
        0.0,
        0.0,
        0.2671958047902151500000000,
        0.7147534261793343500000000,
        0.3702894474455115700000000,
        0.2073797362620235500000000,
        -0.1744149722741736900000000,
        -0.3271878654368842200000000,
        -0.2200617876129250500000000,
        -0.2090388032466696800000000
    ]

    Ismoke = [
        0,
        0.1947480856528854800000000,
        0.6229400520450627500000000,
        0.7405819891143352600000000,
        0.9134392684576959600000000
    ]


    # Applying the fractional polynomial transforms
    # (which includes scaling)

    
    dage = age * 1.0
    dage = dage / 10
    age_1 = math.sqrt(dage)
    age_2 = dage
    dbmi = bmi * 1.0
    dbmi = dbmi / 10
    bmi_1 = math.pow(dbmi, -2)
    bmi_2 = math.pow(dbmi, -2) * math.log(dbmi)

    # Centering the continuous variables

    age_1 = age_1 - 2.099778413772583
    age_2 = age_2 - 4.409069538116455
    bmi_1 = bmi_1 - 0.154046609997749
    bmi_2 = bmi_2 - 0.144072100520134
    rati = rati - 3.554229259490967
    sbp = sbp - 125.7736282348632800
    town = town - 0.032508373260498
    
    # Start of Sum
    a = 0.0

    # The conditional sums

    a = a + Iethrisk[ethrisk]
    a = a + Ismoke[smoke_cat]

    # Sum from continuous values

    a = a + age_1 * 3.8734583855051343
    a = a + age_2 * 0.13466343044783846
    a = a + bmi_1 * -0.15578724033330626
    a = a + bmi_2 * -3.7727795566691125
    a = a + rati * 0.15256952089196796
    a = a + sbp * 0.013216530011965356
    a = a + town * 0.064364752986401708

    # Sum from boolean values
    
    a = a + b_AF * 1.4235421148946676
    a = a + b_ra * 0.30214625115536481
    a = a + b_renal * 0.86147430397214164
    a = a + b_treatedhyp * 0.58893554587337038
    a = a + b_type1 * 1.6684783657502795
    a = a + b_type2 * 1.1350165062510138
    a = a + fh_cvd * 0.51339727757386733

    if smoke_cat == 0:
        a = a + (age_1 * 0.6891139747579299)
    elif smoke_cat == 1:
        a = a + (age_1 * 0.69426328021216266)
    elif smoke_cat == 2:
        a = a + (age_1 * -1.6952388644218186)
    elif smoke_cat == 3:
        a = a + (age_1 * -1.2150150940219255000)

    a = a + age_1 * b_AF * -3.5855215448190969
    a = a + age_1 * b_renal * -3.0766647922469192
    a = a + age_1 * b_treatedhyp * -4.0295302811880314
    a = a + age_1 * b_type1 * -0.33441105674057786
    a = a + age_1 * b_type2 * -3.314480680662053
    a = a + age_1 * bmi_1 * -5.5933905797230006
    a = a + age_1 * bmi_2 * 64.363557283768898
    a = a + age_1 * fh_cvd *  0.86054337612171572
    a = a + age_1 * sbp * -0.050932115455118859
    a = a + age_1 * town * 0.15186645407244537

    if smoke_cat == 0:
        a = a + (age_2 * -0.17653954858826815)
    elif smoke_cat == 1:
        a = a + (age_2 * -0.2323836483278573)
    elif smoke_cat == 2:
        a = a + (age_2 * 0.27343957705518263)
    elif smoke_cat == 3:
        a = a + (age_2 * 0.14325522874541527)

    a = a + age_2 * b_AF * 0.49868713908070322
    a = a + age_2 * b_renal * 0.43930336156649386
    a = a + age_2 * b_treatedhyp * 0.6904385790303250
    a = a + age_2 * b_type1 * -0.17343165660603277
    a = a + age_2 * b_type2 * 0.48649306558679495
    a = a + age_2 * bmi_1 * 1.5223341309207974
    a = a + age_2 * bmi_2 * -12.741343620796407
    a = a + age_2 * fh_cvd * -0.27567084814151099
    a = a + age_2 * sbp * 0.0073790750039744186
    a = a + age_2 * town * -0.048746546267964
    
    # Calculate QRISK2 score

    score = 100.0 * (1.0 - math.pow(survivor[surv], math.exp(a)))
    
    return score